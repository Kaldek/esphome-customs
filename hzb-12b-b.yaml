esphome:
  name: ice-maker
  friendly_name: Ice Maker

  on_boot:
    priority: -10  # Run this early on boot
    then:
    - logger.log: "ESP8266 booting up, delaying state updates..."
    - delay: 5s  # Allow 5 seconds for everything to stabilize, skip actions during this time
    - lambda: 'id(boot_done) = true;'  # Now actions can trigger

esp8266:
  board: esp01_1m
  early_pin_init: False

# Enable logging
logger:

# Enable Home Assistant API
captive_portal:

api:
  encryption:
    key: !secret api_key

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Ice Maker"
    password: !secret wifi_ap_password

# Global variable to indicate if boot sequence is still ongoing
globals:
  - id: boot_done
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: syncing
    type: bool
    restore_value: no
    initial_value: 'false'

# Momentary "virtual button" for MOSFET control on GPIO5
switch:
  - platform: gpio
    pin: GPIO5
    id: mosfet_control
    on_turn_on:
      - delay: 100ms  # Momentarily turn on for 100 milliseconds
      - switch.turn_off: mosfet_control
    internal: true  # Internal only
  
  - platform: restart
    name: "Restart Module"

  # Template Switch to show in HA
  - platform: template
    name: "Power"
    id: ice_maker_switch
    lambda: |-
      if (id(ice_maker_state).state == "ON") {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - if:
          condition:
            lambda: 'return !id(syncing) && id(boot_done);'  
          then:
            - logger.log: "Ice Maker manually turned ON via HA, triggering MOSFET."
            - switch.turn_on: mosfet_control
    turn_off_action:
      - if:
          condition:
            lambda: 'return !id(syncing) && id(boot_done);' 
          then:
            - logger.log: "Ice Maker manually turned OFF via HA, triggering MOSFET."
            - switch.turn_on: mosfet_control

# Actions to perform on device boot


# Interval to check toggling signal for standby/on detection
interval:
  - interval: 1s
    then:
      - lambda: |-
          static int high_duration = 0;
          static int low_duration = 0;
          static std::string last_state;

          // Reset syncing flag at each interval check
          id(syncing) = false;

          if (id(power_led).state) {
            high_duration++;
            low_duration = 0;

            // If the LED has been high for more than 3 seconds, Ice Maker is ON
            if (high_duration >= 3 && last_state != "ON") {
              id(ice_maker_state).publish_state("ON");
              last_state = "ON";

              // Sync HA switch to match actual Ice Maker state
              if (!id(ice_maker_switch).state) {
                id(syncing) = true;
                id(ice_maker_switch).turn_on();  
                ESP_LOGD("sync", "Switch synced - Device is ON.");
              }
            }
          } else {
            low_duration++;
            high_duration = 0;

            // If the LED has been low for more than 3 seconds, Ice Maker is OFF
            if (low_duration >= 3 && last_state != "OFF") {
              id(ice_maker_state).publish_state("OFF");
              last_state = "OFF";

              // Sync HA switch to match actual Ice Maker state
              if (id(ice_maker_switch).state) {
                id(syncing) = true;
                id(ice_maker_switch).turn_off();  
                ESP_LOGD("sync", "Switch synced - Device is OFF.");
              }
            }
          }

# Monitoring the signal (2V expected) on GPIO12 without sending state transitions
binary_sensor:
  - platform: gpio
    pin: GPIO12  
    id: power_led  
    internal: true

# Ice Tray Status
  - platform: gpio
    pin: GPIO4 
    name: "Ice Tray"
    id: ice_tray_sensor
    internal: True
    device_class: problem

# Water Tank Status
  - platform: gpio
    pin: GPIO16 
    name: "Water Tank"
    id: water_tank_sensor
    internal: True
    device_class: problem

# Text sensor for Power state
text_sensor:
  - platform: template
    name: "Power"
    id: ice_maker_state
    icon: "mdi:power"
    internal: True
    update_interval: never

  - platform: template
    name: "Ice Tray Status"
    id: ice_tray_status
    lambda: |-
      if (id(ice_tray_sensor).state) {
        return {"Full"};
      } else {
        return {"OK"};
      }
    update_interval: 5s

  - platform: template
    name: "Water Tank Status"
    id: water_tank_status
    lambda: |-
      if (id(water_tank_sensor).state) {
        return {"Empty"};
      } else {
        return {"OK"};
      }
    update_interval: 5s
